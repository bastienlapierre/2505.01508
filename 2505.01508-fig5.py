# This code calculates the equal/unequal time correlation matrix under Floquet measurement.
import matplotlib.pyplot as plt
import numpy as np
import math as mth
from numpy import linalg as LA
from matplotlib.colors import LogNorm
from scipy import optimize
from scipy.integrate import complex_ode
from scipy.linalg import expm, sinm, cosm
import scipy as sp
import copy
from scipy.optimize import curve_fit
import matplotlib.ticker as ticker
import math

plt.rcParams['text.usetex'] = True
plt.rcParams.update({'font.size': 22})

def random_binary_array(n_disorder,size, p=0.5):

    list_disorder = np.zeros((n_disorder, size))

    for i in range(n_disorder):

        list_disorder[i] = np.random.binomial(n=1, p=p, size=size)


    return list_disorder


def fermions1D(L, envelope, hopping=[0, 1], pbc=True):
    ham = np.zeros((L, L), dtype=complex)
    for j, h in enumerate(hopping):
        for i in range(L - j):
            ham[i, i + j] = -envelope((i + i + j - 1) / 2) * h / 2
            ham[i + j, i] = np.conjugate(ham[i, i + j])
        if pbc:
            for i in range(L - j, L):
                ham[i, (i + j) % L] = -envelope((i + i + j - 1) / 2) * h / 2
                ham[(i + j) % L, i] = np.conjugate(ham[i, (i + j) % L])

    return ham


def casimir(s0,s1,s2):
    return np.sqrt(s0**2-s1**2-s2**2+0j)
    


def alpha(s0,s1,s2,t,L):
    return np.cos(np.pi*k*casimir(s0,s1,s2)*t/L)+1j*s0/casimir(s0,s1,s2)*np.sin(np.pi*k*casimir(s0,s1,s2)*t/L)



def alphaconj(s0,s1,s2,t,L):
    return np.cos(np.pi*k*casimir(s0,s1,s2)*t/L)-1j*s0/casimir(s0,s1,s2)*np.sin(np.pi*k*casimir(s0,s1,s2)*t/L)


def beta(s0,s1,s2,t,L):
    return 1j*(s1+1j*s2)/casimir(s0,s1,s2)*np.sin(np.pi*k*t/L*casimir(s0,s1,s2))


def betaconj(s0,s1,s2,t,L):
    return np.conj(1j*(s1+1j*s2)/casimir(s0,s1,s2)*np.sin(np.pi*k*t/L*casimir(s0,s1,s2)))


s0=1
s1=0
s2=0




ss0=0
ss1=1
ss2=0


k=2
h=0





def mob(x, L):
    return ss0 + ss1*np.cos(2*np.pi*k*(x+1)/L)+ss2*np.sin(2*np.pi*k*(x+1)/L)




def Hssd(L):
    return fermions1D(L, lambda i: mob(i, L), hopping=[0, 1], pbc=True)

def H0(L):
    return fermions1D(L, lambda i: 1, hopping=[0, 1], pbc=True)



def energy(state):
    energytot=0
    for x in range(L-1):
        energytot+= -0.5 * (state[x, x + 1] + state[x + 1, x])
    return energytot


def entropy(state, subset, eps=1e-12):
    if len(subset) == 0:
        return 0
    w, v = LA.eigh(state[subset][:, subset])
    e_sum = 0
    for i in range(len(subset)):
        if w[i] > eps and w[i] < (1 - eps):
            e_sum = e_sum - (w[i] * np.log(w[i]) + (1 - w[i]) * np.log(1 - w[i]))
    return e_sum


# parameters    
L=202
T0=L/100
T1=L/50
# gamma=0.1
cycles = 120
tau=0.1



energyCFT=[]
entropyCFT=[]


#nonunitarymat=expm(-tau*T0*H0(L))
nonunitarymat=expm(-tau*T0*H0(L))
unitarymat=expm(-1j*T0*H0(L))@expm(-1j*T1*Hssd(L))

def unitarylist(m):
    if m==0:
        return unitarymat
    if m==1:
        return nonunitarymat

vals, U = np.linalg.eigh(H0(L))




entropylist_singlelattice=[]
numberdisorder=4000 #This parameter was 4000

randomlist=random_binary_array(numberdisorder,10000)

for p in range(1):
    print(p)
    U = np.matrix(U)
    Uf = U[:,: int(L/2)]
    Q,R=LA.qr(Uf)
    correlation= (Uf@(Uf.conj().T)).T
    Uf=Q
    l=int(L/2)
    #entropylist.append(entropy(correlation, np.arange(0, l + 1)))
    #energylist.append(energy(correlation))
    
    
    distribution = np.zeros(shape=(int(L)))
    distribution[: int(L / 2)] = 1
    stateini = np.matrix(np.einsum("ik, kj, k -> ij", U, U.H, distribution))
    
    
    
    for j in range(cycles):
        Q,R=LA.qr(unitarylist(randomlist[p,j])@Uf)
        Uf=Q
        correlation= (Uf@(Uf.conj().T)).T
        l=int(L/2)
        # print(Uf.H @ Uf)
    
        
        entropylist_singlelattice.append(entropy(correlation,  np.arange(1, (L // 2) + 1)))
        
    

entropylist_singlelattice=np.array(entropylist_singlelattice)  




q=2
hq = 1/q*(h+1/24*(q**2-1))


matnonuni=np.array([[np.exp(-np.pi*tau*q/L*T0),0],[0,np.exp(np.pi*tau*q/L*T0)]])
mat2=np.array([[alpha(ss0,ss1,ss2,T1,L),beta(ss0,ss1,ss2,T1,L)],[betaconj(ss0,ss1,ss2,T1,L),alphaconj(ss0,ss1,ss2,T1,L)]])
mat1=np.array([[alpha(s0,s1,s2,T0,L),beta(s0,s1,s2,T0,L)],[betaconj(s0,s1,s2,T0,L),alphaconj(s0,s1,s2,T0,L)]])


def create_alternating_array(N):
    return np.array([i % 2 for i in range(N)])

def quasiperiodicsequences(m):
    if m==0:
        return mat1@mat2
    if m==1:
        return matnonuni

entropyCFTrandom=[]
energyCFTrandom=[]
# numberdisorderCFT=10000 #This parameter was 100000
for p in range(numberdisorder):
    print(p)
    # randomlist=random_binary_array(10000)
    ncyclemat=np.identity(2, dtype=complex)
    ncyclemat2=np.identity(2, dtype=complex)
    for m in range(cycles):
        ncyclemat=quasiperiodicsequences(randomlist[p,m])@ncyclemat
        zn = (ncyclemat[0,1]/ncyclemat[1,1])
        znb = np.conj(zn)
        energyCFTrandom.append(4*np.pi/L*q*hq*(1+abs(zn)**2)/(1-abs(zn)**2)-np.pi*q**2/(6*L))
        #entropyCFTrandom.append(np.log(((2 * np.pi)/L)**(-4) * np.abs( ((-1 + znb)**2 * (-1 + (-1)**q * znb)**2 * ((-((-1 + zn) * znb) / (-1 + znb))**(1/q) + (-1)**q * (1 + (1 - zn * znb) / (-1 + (-1)**q * znb))**(1/q))**2) / ((-1)**q * znb**2 * (-((-1 + zn) * znb) / (-1 + znb))**(-1 + 1/q) * (-1 + zn * znb)**2 * (1 + (1 - zn * znb) / (-1 + (-1)**q * znb))**(-1 + 1/q)) )**2)/12)
        entropyCFTrandom.append(-np.log(((2 * np.pi)/L)**(4) * np.abs(((np.abs(zn)**2 - 1)**2) / ((zn - 1)**2 * ((-1)**k * np.conj(zn) - 1)**2))**2)/12)

#Single realization 
entropyCFTsingle=[]
ncyclemat=np.identity(2, dtype=complex)
ncyclemat2=np.identity(2, dtype=complex)
for m in range(cycles):
        ncyclemat=quasiperiodicsequences(randomlist[0,m])@ncyclemat
        zn = (ncyclemat[0,1]/ncyclemat[1,1])
        znb = np.conj(zn)
        #energyCFTsingle.append(4*np.pi/L*q*hq*(1+abs(zn)**2)/(1-abs(zn)**2)-np.pi*q**2/(6*L))
        #entropyCFTrandom.append(np.log(((2 * np.pi)/L)**(-4) * np.abs( ((-1 + znb)**2 * (-1 + (-1)**q * znb)**2 * ((-((-1 + zn) * znb) / (-1 + znb))**(1/q) + (-1)**q * (1 + (1 - zn * znb) / (-1 + (-1)**q * znb))**(1/q))**2) / ((-1)**q * znb**2 * (-((-1 + zn) * znb) / (-1 + znb))**(-1 + 1/q) * (-1 + zn * znb)**2 * (1 + (1 - zn * znb) / (-1 + (-1)**q * znb))**(-1 + 1/q)) )**2)/12)
        entropyCFTsingle.append(-np.log(((2 * np.pi)/L)**(4) * np.abs(((np.abs(zn)**2 - 1)**2) / ((zn - 1)**2 * ((-1)**k * np.conj(zn) - 1)**2))**2)/12)

entropyCFTfloquet=[]
energyCFTfloquet=[]
periodiclist= create_alternating_array(10000)
ncyclemat2=np.identity(2, dtype=complex)
for m in range(cycles):
    ncyclemat2=quasiperiodicsequences(periodiclist[m])@ncyclemat2
    zn2 = (ncyclemat2[0,1]/ncyclemat2[1,1])
    znb2 = np.conj(zn2)
    entropyCFTfloquet.append(-np.log(((2 * np.pi)/L)**(4) * np.abs(((np.abs(zn2)**2 - 1)**2) / ((zn2 - 1)**2 * ((-1)**k * np.conj(zn2) - 1)**2))**2)/12)
    energyCFTfloquet.append(4*np.pi/L*k*hq*(1+abs(zn2)**2)/(1-abs(zn2)**2)-np.pi*k**2/(6*L))





entropyCFTrandom=np.array(entropyCFTrandom)
energyCFTrandom=np.array(energyCFTrandom)
entropyCFTsingle=np.array(entropyCFTsingle)
entropyCFTrandom=entropyCFTrandom.reshape((len(range(numberdisorder)),len(range(cycles))))
energyCFTrandom=energyCFTrandom.reshape((len(range(numberdisorder)),len(range(cycles))))

entropyCFTrandom=np.average(entropyCFTrandom,axis=0)
energyCFTrandom=np.average(energyCFTrandom,axis=0)








# plt.plot(np.arange(cycles)[::2],np.array(entropyCFTfloquet)[::2]-(entropyCFTfloquet[0]-entropylist[0]), color=plt.cm.RdYlBu((0.5)/(5)))
# plt.plot(np.arange(cycles)[1::2],np.array(entropyCFTfloquet)[1::2]-(entropyCFTfloquet[1]-entropylist[1]), color=plt.cm.RdYlBu((1.5)/(5)))
# plt.plot(np.array(entropyCFTrandom)-(entropyCFTrandom[0]-entropylist[0]), color=plt.cm.RdYlBu((4)/(5)))
# plt.plot(np.arange(cycles)[::2], np.array(entropylist)[::2],marker='o',markerfacecolor='none', markersize=6, linestyle=' ', color=plt.cm.RdYlBu((4.5)/(5)))




lat1_Heating= np.array([2.12415708, 2.14080125, 2.16279558, 2.18955385, 2.21916978, 2.25189821, 2.28706694, 2.3229563,  2.36108171, 2.39840404, 2.43625527, 2.47309146, 2.50904807, 2.54590876, 2.58111293, 2.61502188, 2.64792187, 2.67960139, 2.71063937, 2.74031933, 2.7719903,  2.80011517, 2.82878526, 2.85468807, 2.87856276, 2.90373515, 2.92700119, 2.94766464, 2.96918339, 2.98784052, 3.00634941, 3.02640137, 3.04315314, 3.05853612, 3.0747017,  3.08898241, 3.10154906, 3.11441602, 3.12248845, 3.13304884, 3.14067518, 3.14841603, 3.15518536, 3.16249262, 3.16941723, 3.17275352, 3.17899952, 3.18306075, 3.18682789, 3.19231495, 3.19348256, 3.19620727, 3.20033417, 3.20656804, 3.20988779, 3.21245909, 3.21644062, 3.2174389,  3.21949878, 3.22306891, 3.22327302, 3.22604486, 3.224363,   3.22486519, 3.22440247, 3.2225708, 3.22461796, 3.22636657, 3.22578462, 3.22731509, 3.22520371, 3.22708724, 3.22964677, 3.23219192, 3.23046649, 3.2337288,  3.23201512, 3.2298773, 3.23093856, 3.2311967,  3.22864944, 3.22993711, 3.23184563, 3.22914573, 3.2284845,  3.23098434, 3.23190645, 3.23541995, 3.23363565, 3.23443115, 3.23614514, 3.23749686, 3.24022576, 3.24174176, 3.24035927, 3.24014856, 3.24134633, 3.23915359, 3.23862233, 3.23919137, 3.23940743, 3.23822393, 3.23784471, 3.2355252,  3.23539942, 3.23610663, 3.23222946, 3.23144266, 3.23052794, 3.22730985, 3.22875571, 3.22860117, 3.23173043, 3.23333443, 3.23342349, 3.23282862, 3.23594922, 3.23646262, 3.23837217, 3.23737486])
lat2_Heating = np.array([ 2.12413659, 2.14127617, 2.16333386, 2.19062486, 2.22139121, 2.25437188,2.28920798, 2.3253939,  2.36388611, 2.4014847,  2.43821675, 2.47520308,2.5122592,  2.54805341, 2.58411546, 2.62150462, 2.65473431, 2.68605467,2.71848649, 2.74932718, 2.77775996, 2.80583726, 2.83414154, 2.86100502,2.88706325, 2.9099921,  2.9319868,  2.95157146, 2.97375829, 2.99189778,3.01051095, 3.02727822, 3.04128394, 3.05705619, 3.07011468, 3.08379614,3.09624655, 3.10875992, 3.11786952, 3.1288749,  3.13922848, 3.14859793,3.15755298, 3.16402072, 3.17080651, 3.17459186, 3.18163742, 3.18861291,3.19355648, 3.19708181, 3.20298766, 3.20683836, 3.21011756, 3.2120385,3.21424917, 3.21555192, 3.21784113, 3.21973813, 3.22211936, 3.22608605,3.22696903, 3.23005561, 3.23360979, 3.23266715, 3.23403614, 3.2330252,3.23428099, 3.23472353, 3.23252947, 3.23291378, 3.23024014, 3.22966078,3.23029285, 3.23290569, 3.23460089, 3.23541923, 3.23500991, 3.23667,3.23757866, 3.23833645, 3.23713377, 3.23524994, 3.23546932, 3.23364487,3.23331574, 3.2323691,  3.23233618, 3.23338394, 3.23568444, 3.23572019,3.23553883, 3.23203628, 3.23287046, 3.23161482, 3.23109247, 3.23138541,3.23165969, 3.23347598, 3.23278073, 3.23105489, 3.22991112, 3.22929038,3.2305133,  3.22960783, 3.22860477, 3.22960522, 3.22978527, 3.22945008, 3.2301074,  3.23218628, 3.23195739, 3.23129334, 3.22988046, 3.22738012,3.22658589, 3.2254414,  3.22734421, 3.22823927, 3.22794247, 3.22765825])

lat_Heating = (lat1_Heating + lat2_Heating)/2

# lat_Nonheating = np.array([2.12050157, 2.13009696, 2.14201272, 2.15632777, 2.17225693, 2.1892975,2.20693501, 2.22462021, 2.24227507, 2.25940943, 2.27589137, 2.29183852,2.30672251, 2.32105021, 2.33403559, 2.34674466, 2.35701715, 2.36655106,2.37517243, 2.38265413, 2.38903243, 2.39426544, 2.39798488, 2.40066738,2.40250589, 2.40307866, 2.40258224, 2.40124139, 2.398712,   2.39546978,2.39100831, 2.38611089, 2.38038549, 2.37396363, 2.36702925, 2.35954512,2.35152605, 2.34314589, 2.33456224, 2.32578269, 2.31686007, 2.30805063,2.29939942, 2.29088019, 2.282755,   2.27527916, 2.26839933, 2.26207045,2.25642724, 2.25163409, 2.24764633, 2.24442529, 2.24210797, 2.24076819,2.24009539, 2.24032242, 2.24131304, 2.24307103, 2.24514174, 2.24818212,2.25143633, 2.25507524, 2.2593663,  2.26388814, 2.26863529, 2.27354344,2.27854852, 2.2835132,  2.28852493, 2.29360026, 2.29846844, 2.30289196,2.30708381, 2.31102949, 2.31451195, 2.31748474, 2.32021035, 2.32295481,2.32482058, 2.32633214, 2.32749815, 2.32849785, 2.32879576, 2.32862403,2.32816267, 2.32724809, 2.32606613, 2.32450539, 2.32268515, 2.32083926,2.31855894, 2.31610426, 2.31340514, 2.31069549, 2.30790973, 2.30514651,2.30226431, 2.29945314, 2.29662506, 2.29391647, 2.29128889, 2.2888152,2.2864994,  2.28439891, 2.28260264, 2.28098618, 2.27966192, 2.27849384,2.27769651, 2.27709557, 2.27674049, 2.27654081, 2.27651636, 2.27680522,2.27729394, 2.27820081, 2.27894402, 2.27998565, 2.28112409, 2.28238012,2.28353546, 2.28499937, 2.28647779, 2.28820514, 2.28983834, 2.29152339,2.29328841, 2.29473086, 2.2962549,  2.2977195,  2.29897265, 2.3001567,2.30124226, 2.30212196, 2.30287178, 2.30363152, 2.30417832, 2.30451014,2.30474113, 2.3047096,  2.30493768, 2.30471694, 2.30445607, 2.3039932,2.30348464, 2.30282906, 2.30194751, 2.30110376, 2.30033823, 2.29951706,2.2986987,  2.29799282, 2.29697246, 2.29623215, 2.29532224, 2.29452146,2.29368366, 2.29286428, 2.29209366, 2.2913099,  2.29066139, 2.29024156,2.28978704, 2.28933792, 2.289111,   2.28895676, 2.28891145, 2.28875465,2.28870553, 2.28874953, 2.2887744,  2.28893161, 2.28921811, 2.28942063,2.28959536, 2.29005638, 2.29048758, 2.29092321, 2.29145725, 2.29189387,2.29231931, 2.29283834, 2.29331452, 2.29363214, 2.29399742, 2.29426147,2.29473496, 2.29514439, 2.29558004, 2.29591888, 2.29605661, 2.29623538,2.29646279, 2.29671535, 2.29685789, 2.29703352, 2.29703582, 2.29712865,2.29709752, 2.29699611, 2.29691781, 2.29675774, 2.29656883, 2.2964539,2.29614503, 2.29597483, 2.29575089, 2.29542654, 2.29519179, 2.29497062,2.29486626, 2.2945573,  2.2944112,  2.29425111, 2.29410218, 2.29381528,2.29358759, 2.29323298, 2.29298025, 2.29283237, 2.29269733, 2.29261908,2.29247407, 2.29237622, 2.2924897,  2.29243583, 2.29244111, 2.29254866,2.29255221, 2.29261536, 2.2925526,  2.29261884, 2.29281979, 2.29296528,2.29311769, 2.29333269, 2.29348752, 2.2935272,  2.293833,   2.29399126,2.29416266, 2.29422963, 2.29431898, 2.29455189, 2.29464745, 2.29465755,2.29471644, 2.2949823,  2.2949008,  2.29476879, 2.29471482, 2.29477751,2.29490558, 2.29476855, 2.29462812, 2.29464441, 2.29468458, 2.29457316,2.29461492, 2.29444788, 2.29430771, 2.29427498, 2.29408877, 2.29407273,2.29408294, 2.29404886, 2.29381591, 2.29374698, 2.29368253, 2.29371465,2.29369559, 2.29363825, 2.29350841, 2.29344231, 2.29347521, 2.29349108,2.29356213, 2.29363117, 2.29359718, 2.29373961, 2.29373123, 2.29379933,2.293877,   2.29393649, 2.2939604,  2.29396978, 2.29413103, 2.29417453,2.29425142, 2.29423024, 2.29439815, 2.29430962, 2.29435591, 2.29429795, 2.29422108, 2.29414406, 2.29413436, 2.2942116,  2.29430071, 2.29424815])



# plt.plot(np.array(entropyCFTfloquet)[::2]-(entropyCFTfloquet[0]-entropylist[0]), color=plt.cm.RdYlBu((0.5)/(5)))
# plt.plot(np.array(entropyCFTfloquet)[1::2]-(entropyCFTfloquet[1]-entropylist[1]), color=plt.cm.RdYlBu((0.5)/(5)))
# plt.plot(np.array(entropyCFTrandom)[::2]-(entropyCFTrandom[0]-entropylist[0]), color=plt.cm.RdYlBu((5)/(5)))
# plt.plot(np.array(entropyCFTsingle)[::2]-(entropyCFTsingle[0]-entropylist[0]), color='gray', linestyle='--', alpha=0.5)
# plt.plot(np.arange(cycles/2)[::2], np.array(entropylist)[::4],marker='o',markerfacecolor='none', markersize=6, linestyle=' ', color=plt.cm.RdYlBu((5)/(5)))

## How not to have too many entries

first_part = lat_Heating[:100][::4]
second_part = lat_Heating[100:][::4]
# Combine both
lat_Heating = np.concatenate((first_part, second_part))

cyc = np.arange(60)
first_part = cyc[:50][::2]
second_part = cyc[50:][::2]
# # Combine both
cyc = np.concatenate((first_part, second_part))

first_part = entropylist_singlelattice[:100][::4]
second_part = entropylist_singlelattice[100:][::4]
# Combine both
entropylist_singlelattice = np.concatenate((first_part, second_part))

# plt.plot(np.array(entropyCFTfloquet)[::2]-(entropyCFTfloquet[0]-lat_Nonheating[0]), color=plt.cm.RdYlBu((0.5)/(5)))
# plt.plot(np.array(entropyCFTfloquet)[1::2]-(entropyCFTfloquet[1]-lat_Nonheating[0]), color=plt.cm.RdYlBu((0.5)/(5)))
plt.plot(np.array(entropyCFTrandom)[::2]-(entropyCFTrandom[0]-lat_Heating[0]), color=plt.cm.RdYlBu((5)/(5)))
plt.plot(np.array(entropyCFTsingle)[::2]-(entropyCFTsingle[0]-lat_Heating[0]), color='gray', linestyle='--', alpha=0.5)
plt.plot(cyc, entropylist_singlelattice-(entropylist_singlelattice[0]-lat_Heating[0]),marker='o',markerfacecolor='none', markersize=6, linestyle=' ', color='gray', alpha=0.5)
plt.plot(cyc, lat_Heating,marker='o',markerfacecolor='none', markersize=6, linestyle=' ', color=plt.cm.RdYlBu((5)/(5)))

plt.show()




## 400 REALIZATIONS L=202
# listt1=np.array([2.12411591, 2.14124952, 2.16233043, 2.18720542, 2.21563576,       2.24794854, 2.28105371, 2.31533469, 2.35590581, 2.39377451,       2.43003675, 2.46913168, 2.50830128, 2.54623383, 2.58480092,       2.61863859, 2.65432398, 2.68832295, 2.71666663, 2.74787603,       2.77518688, 2.80338897, 2.83200257, 2.85488286, 2.88347751,       2.90056654, 2.9262513 , 2.94749105, 2.97049925, 2.98893588,       3.00556748, 3.02583684, 3.03670878, 3.05248301, 3.06216732,       3.07320867, 3.08358284, 3.09589637, 3.10593813, 3.11659706,       3.12788778, 3.13222656, 3.14319737, 3.15149401, 3.16670776,       3.17467385, 3.17585267, 3.18933258, 3.19428233, 3.19049662,       3.18454965, 3.1922693 , 3.1922801 , 3.19998802, 3.2020329 ,       3.20710822, 3.20877717, 3.20757701, 3.20465815, 3.20554126,       3.21131715, 3.21207745, 3.22060879, 3.22275392, 3.21905838,       3.21770982, 3.21643575, 3.22260887, 3.226242  , 3.23020896,       3.22578135, 3.23370335, 3.23478166, 3.23714874, 3.23597221,       3.23636411, 3.23751144, 3.23455722, 3.23043223, 3.23051601])

# listt2=np.array([2.12406468, 2.14048883, 2.16242535, 2.18734758, 2.21551247,       2.24664255, 2.2831642 , 2.31631282, 2.35221543, 2.38647799,       2.42433931, 2.46046712, 2.49829569, 2.53196234, 2.57128871,       2.60327795, 2.63636472, 2.67113333, 2.70316228, 2.73242403,       2.76256168, 2.78733325, 2.81718597, 2.84026941, 2.86299371,       2.8832006 , 2.90761067, 2.93052975, 2.9533983 , 2.9738216 ,       2.99406097, 3.01269332, 3.0310158 , 3.04377043, 3.05515532,       3.07615437, 3.0896368 , 3.09932383, 3.11118361, 3.1148084 ,       3.12534744, 3.13083076, 3.13790877, 3.14320685, 3.15262416,       3.16146682, 3.1679442 , 3.17069694, 3.17523458, 3.18200302,       3.18651853, 3.18872952, 3.19486045, 3.20719097, 3.21236113,       3.21631111, 3.21433715, 3.21399779, 3.21709439, 3.2130402 ,       3.21415494, 3.21826119, 3.22088749, 3.21489048, 3.21213468,       3.20997223, 3.21460916, 3.22146332, 3.22469618, 3.2246335 ,       3.22275836, 3.21773858, 3.225766  , 3.22396822, 3.22581783,       3.23411538, 3.23492406, 3.23701832, 3.23331509, 3.23046337])
# plt.plot(np.array(entropyCFTrandom)-(entropyCFTrandom[0]-np.array((listt2+listt1)/2)[0]))
# plt.plot(np.array((listt2+listt1)/2),marker='x',markerfacecolor='none', markersize=6,linestyle=' ')
# plt.show()



# latticecalc=np.array([2.12041159, 2.13041773, 2.14255077, 2.15720842, 2.17398146,       2.19079748, 2.20841726, 2.22534057, 2.24289955, 2.26086702,       2.27811127, 2.29416774, 2.30861472, 2.32348714, 2.33667861,       2.34866878, 2.35980138, 2.36934133, 2.37768464, 2.38472755,       2.39080871, 2.39496221, 2.39862634, 2.40135557, 2.40323977,       2.40370902, 2.40328089, 2.40225603, 2.39951639, 2.39617904,       2.39187076, 2.38665543, 2.38073712, 2.37418936, 2.36719293,       2.3596816 , 2.35203236, 2.34376687, 2.33511242, 2.32608466,       2.31703901, 2.3082911 , 2.29974805, 2.29123701, 2.28282279,       2.27515493, 2.26794331, 2.26156955, 2.25602914, 2.25141573,       2.2470334 , 2.24394774, 2.24163517, 2.24017151, 2.23913722,       2.23946042, 2.24029786, 2.24182054, 2.24421159, 2.24669181,       2.25033027, 2.25416549, 2.25833488, 2.26252099, 2.26784958,       2.27265225, 2.2773056 , 2.28307691, 2.28766985, 2.29244524,       2.29753268, 2.30207955, 2.30647245, 2.31090924, 2.31448261,       2.3175806 , 2.32052442, 2.32328547, 2.32555451, 2.32713927,       2.32784682, 2.32869653, 2.32907011, 2.32941719, 2.32913733,       2.32844752, 2.32742711, 2.32587854, 2.32396579, 2.32171226,       2.31920997, 2.31687559, 2.314392  , 2.31176427, 2.30890324,       2.30592793, 2.30291394, 2.29994828, 2.29708073, 2.29422583,       2.29161616, 2.28913461, 2.28697102, 2.28480411, 2.28260115,       2.28084493, 2.27941241, 2.27822617, 2.27739343, 2.27666305,       2.27638213, 2.27608382, 2.2759027 , 2.27618152, 2.2765506 ,       2.27731678, 2.27833526, 2.27933989, 2.28060696, 2.28148483,       2.28275711, 2.28445531, 2.28615948, 2.2876146 , 2.28921719,       2.29063655, 2.29210833, 2.29348238, 2.29488576, 2.29657421,       2.29787698, 2.29895441, 2.30032475, 2.30117527, 2.3025389 ,       2.30317364, 2.30367869, 2.30432678, 2.3043102 , 2.30418522,       2.30414176, 2.3041257 , 2.30370999, 2.30343009, 2.30301616,       2.30238465, 2.3018056 , 2.30102067, 2.30009618, 2.29944272,       2.29861398, 2.29780209, 2.29689296, 2.29622422, 2.29510103,       2.29429572, 2.29352763, 2.29272089, 2.29192283, 2.29106378,       2.29042008, 2.28994556, 2.289292  , 2.28884339, 2.28865354,       2.28852541, 2.28845565, 2.28860044, 2.28856625, 2.28826223,       2.28818677, 2.28822364, 2.288343  , 2.28859539, 2.2887548 ,       2.28924423, 2.28982354, 2.29069599, 2.2912506 , 2.29195599,       2.29226946, 2.29286071, 2.29342442, 2.29394405, 2.29451082,       2.29516822, 2.29575186, 2.29604336, 2.29652166, 2.29670948,       2.29677468, 2.29712608, 2.29763885, 2.29791904, 2.29808609,       2.29812145, 2.29826266, 2.29820822, 2.29793198, 2.29781398])
# plt.plot(np.array(entropyCFTrandom)-(entropyCFTrandom[0]-entropylist[0]))
# plt.plot(latticecalc,marker='x',markerfacecolor='none', markersize=6,linestyle=' ')
# plt.show()











### ENTANGLEMENT ENTROPY TAU 0.1
#plt.plot(np.array([2.12041159, 2.13041773, 2.14255077, 2.15720842, 2.17398146,       2.19079748, 2.20841726, 2.22534057, 2.24289955, 2.26086702,       2.27811127, 2.29416774, 2.30861472, 2.32348714, 2.33667861,       2.34866878, 2.35980138, 2.36934133, 2.37768464, 2.38472755,       2.39080871, 2.39496221, 2.39862634, 2.40135557, 2.40323977,       2.40370902, 2.40328089, 2.40225603, 2.39951639, 2.39617904,       2.39187076, 2.38665543, 2.38073712, 2.37418936, 2.36719293,       2.3596816 , 2.35203236, 2.34376687, 2.33511242, 2.32608466,       2.31703901, 2.3082911 , 2.29974805, 2.29123701, 2.28282279,       2.27515493, 2.26794331, 2.26156955, 2.25602914, 2.25141573,       2.2470334 , 2.24394774, 2.24163517, 2.24017151, 2.23913722,       2.23946042, 2.24029786, 2.24182054, 2.24421159, 2.24669181,       2.25033027, 2.25416549, 2.25833488, 2.26252099, 2.26784958,       2.27265225, 2.2773056 , 2.28307691, 2.28766985, 2.29244524,       2.29753268, 2.30207955, 2.30647245, 2.31090924, 2.31448261,       2.3175806 , 2.32052442, 2.32328547, 2.32555451, 2.32713927,       2.32784682, 2.32869653, 2.32907011, 2.32941719, 2.32913733,       2.32844752, 2.32742711, 2.32587854, 2.32396579, 2.32171226,       2.31920997, 2.31687559, 2.314392  , 2.31176427, 2.30890324,       2.30592793, 2.30291394, 2.29994828, 2.29708073, 2.29422583,       2.29161616, 2.28913461, 2.28697102, 2.28480411, 2.28260115,       2.28084493, 2.27941241, 2.27822617, 2.27739343, 2.27666305,       2.27638213, 2.27608382, 2.2759027 , 2.27618152, 2.2765506 ,       2.27731678, 2.27833526, 2.27933989, 2.28060696, 2.28148483,       2.28275711, 2.28445531, 2.28615948, 2.2876146 , 2.28921719,       2.29063655, 2.29210833, 2.29348238, 2.29488576, 2.29657421,       2.29787698, 2.29895441, 2.30032475, 2.30117527, 2.3025389 ,       2.30317364, 2.30367869, 2.30432678, 2.3043102 , 2.30418522,       2.30414176, 2.3041257 , 2.30370999, 2.30343009, 2.30301616,       2.30238465, 2.3018056 , 2.30102067, 2.30009618, 2.29944272,       2.29861398, 2.29780209, 2.29689296, 2.29622422, 2.29510103,       2.29429572, 2.29352763, 2.29272089, 2.29192283, 2.29106378,       2.29042008, 2.28994556, 2.289292  , 2.28884339, 2.28865354,       2.28852541, 2.28845565, 2.28860044, 2.28856625, 2.28826223,       2.28818677, 2.28822364, 2.288343  , 2.28859539, 2.2887548 ,       2.28924423, 2.28982354, 2.29069599, 2.2912506 , 2.29195599,       2.29226946, 2.29286071, 2.29342442, 2.29394405, 2.29451082,       2.29516822, 2.29575186, 2.29604336, 2.29652166, 2.29670948,       2.29677468, 2.29712608, 2.29763885, 2.29791904, 2.29808609,       2.29812145, 2.29826266, 2.29820822, 2.29793198, 2.29781398]))


### Lattice results with 2000 random realizations for Heating phase 
# 
# lat1_Heating= np.array([2.12415708, 2.14080125, 2.16279558, 2.18955385, 2.21916978, 2.25189821, 2.28706694, 2.3229563,  2.36108171, 2.39840404, 2.43625527, 2.47309146, 2.50904807, 2.54590876, 2.58111293, 2.61502188, 2.64792187, 2.67960139, 2.71063937, 2.74031933, 2.7719903,  2.80011517, 2.82878526, 2.85468807, 2.87856276, 2.90373515, 2.92700119, 2.94766464, 2.96918339, 2.98784052, 3.00634941, 3.02640137, 3.04315314, 3.05853612, 3.0747017,  3.08898241, 3.10154906, 3.11441602, 3.12248845, 3.13304884, 3.14067518, 3.14841603, 3.15518536, 3.16249262, 3.16941723, 3.17275352, 3.17899952, 3.18306075, 3.18682789, 3.19231495, 3.19348256, 3.19620727, 3.20033417, 3.20656804, 3.20988779, 3.21245909, 3.21644062, 3.2174389,  3.21949878, 3.22306891, 3.22327302, 3.22604486, 3.224363,   3.22486519, 3.22440247, 3.2225708, 3.22461796, 3.22636657, 3.22578462, 3.22731509, 3.22520371, 3.22708724, 3.22964677, 3.23219192, 3.23046649, 3.2337288,  3.23201512, 3.2298773, 3.23093856, 3.2311967,  3.22864944, 3.22993711, 3.23184563, 3.22914573, 3.2284845,  3.23098434, 3.23190645, 3.23541995, 3.23363565, 3.23443115, 3.23614514, 3.23749686, 3.24022576, 3.24174176, 3.24035927, 3.24014856, 3.24134633, 3.23915359, 3.23862233, 3.23919137, 3.23940743, 3.23822393, 3.23784471, 3.2355252,  3.23539942, 3.23610663, 3.23222946, 3.23144266, 3.23052794, 3.22730985, 3.22875571, 3.22860117, 3.23173043, 3.23333443, 3.23342349, 3.23282862, 3.23594922, 3.23646262, 3.23837217, 3.23737486])

# lat2_Heating = np.array([ 2.12413659, 2.14127617, 2.16333386, 2.19062486, 2.22139121, 2.25437188,2.28920798, 2.3253939,  2.36388611, 2.4014847,  2.43821675, 2.47520308,2.5122592,  2.54805341, 2.58411546, 2.62150462, 2.65473431, 2.68605467,2.71848649, 2.74932718, 2.77775996, 2.80583726, 2.83414154, 2.86100502,2.88706325, 2.9099921,  2.9319868,  2.95157146, 2.97375829, 2.99189778,3.01051095, 3.02727822, 3.04128394, 3.05705619, 3.07011468, 3.08379614,3.09624655, 3.10875992, 3.11786952, 3.1288749,  3.13922848, 3.14859793,3.15755298, 3.16402072, 3.17080651, 3.17459186, 3.18163742, 3.18861291,3.19355648, 3.19708181, 3.20298766, 3.20683836, 3.21011756, 3.2120385,3.21424917, 3.21555192, 3.21784113, 3.21973813, 3.22211936, 3.22608605,3.22696903, 3.23005561, 3.23360979, 3.23266715, 3.23403614, 3.2330252,3.23428099, 3.23472353, 3.23252947, 3.23291378, 3.23024014, 3.22966078,3.23029285, 3.23290569, 3.23460089, 3.23541923, 3.23500991, 3.23667,3.23757866, 3.23833645, 3.23713377, 3.23524994, 3.23546932, 3.23364487,3.23331574, 3.2323691,  3.23233618, 3.23338394, 3.23568444, 3.23572019,3.23553883, 3.23203628, 3.23287046, 3.23161482, 3.23109247, 3.23138541,3.23165969, 3.23347598, 3.23278073, 3.23105489, 3.22991112, 3.22929038,3.2305133,  3.22960783, 3.22860477, 3.22960522, 3.22978527, 3.22945008, 3.2301074,  3.23218628, 3.23195739, 3.23129334, 3.22988046, 3.22738012,3.22658589, 3.2254414,  3.22734421, 3.22823927, 3.22794247, 3.22765825])

# lat_Nonheating = np.array([2.12050157, 2.13009696, 2.14201272, 2.15632777, 2.17225693, 2.1892975,2.20693501, 2.22462021, 2.24227507, 2.25940943, 2.27589137, 2.29183852,2.30672251, 2.32105021, 2.33403559, 2.34674466, 2.35701715, 2.36655106,2.37517243, 2.38265413, 2.38903243, 2.39426544, 2.39798488, 2.40066738,2.40250589, 2.40307866, 2.40258224, 2.40124139, 2.398712,   2.39546978,2.39100831, 2.38611089, 2.38038549, 2.37396363, 2.36702925, 2.35954512,2.35152605, 2.34314589, 2.33456224, 2.32578269, 2.31686007, 2.30805063,2.29939942, 2.29088019, 2.282755,   2.27527916, 2.26839933, 2.26207045,2.25642724, 2.25163409, 2.24764633, 2.24442529, 2.24210797, 2.24076819,2.24009539, 2.24032242, 2.24131304, 2.24307103, 2.24514174, 2.24818212,2.25143633, 2.25507524, 2.2593663,  2.26388814, 2.26863529, 2.27354344,2.27854852, 2.2835132,  2.28852493, 2.29360026, 2.29846844, 2.30289196,2.30708381, 2.31102949, 2.31451195, 2.31748474, 2.32021035, 2.32295481,2.32482058, 2.32633214, 2.32749815, 2.32849785, 2.32879576, 2.32862403,2.32816267, 2.32724809, 2.32606613, 2.32450539, 2.32268515, 2.32083926,2.31855894, 2.31610426, 2.31340514, 2.31069549, 2.30790973, 2.30514651,2.30226431, 2.29945314, 2.29662506, 2.29391647, 2.29128889, 2.2888152,2.2864994,  2.28439891, 2.28260264, 2.28098618, 2.27966192, 2.27849384,2.27769651, 2.27709557, 2.27674049, 2.27654081, 2.27651636, 2.27680522,2.27729394, 2.27820081, 2.27894402, 2.27998565, 2.28112409, 2.28238012,2.28353546, 2.28499937, 2.28647779, 2.28820514, 2.28983834, 2.29152339,2.29328841, 2.29473086, 2.2962549,  2.2977195,  2.29897265, 2.3001567,2.30124226, 2.30212196, 2.30287178, 2.30363152, 2.30417832, 2.30451014,2.30474113, 2.3047096,  2.30493768, 2.30471694, 2.30445607, 2.3039932,2.30348464, 2.30282906, 2.30194751, 2.30110376, 2.30033823, 2.29951706,2.2986987,  2.29799282, 2.29697246, 2.29623215, 2.29532224, 2.29452146,2.29368366, 2.29286428, 2.29209366, 2.2913099,  2.29066139, 2.29024156,2.28978704, 2.28933792, 2.289111,   2.28895676, 2.28891145, 2.28875465,2.28870553, 2.28874953, 2.2887744,  2.28893161, 2.28921811, 2.28942063,2.28959536, 2.29005638, 2.29048758, 2.29092321, 2.29145725, 2.29189387,2.29231931, 2.29283834, 2.29331452, 2.29363214, 2.29399742, 2.29426147,2.29473496, 2.29514439, 2.29558004, 2.29591888, 2.29605661, 2.29623538,2.29646279, 2.29671535, 2.29685789, 2.29703352, 2.29703582, 2.29712865,2.29709752, 2.29699611, 2.29691781, 2.29675774, 2.29656883, 2.2964539,2.29614503, 2.29597483, 2.29575089, 2.29542654, 2.29519179, 2.29497062,2.29486626, 2.2945573,  2.2944112,  2.29425111, 2.29410218, 2.29381528,2.29358759, 2.29323298, 2.29298025, 2.29283237, 2.29269733, 2.29261908,2.29247407, 2.29237622, 2.2924897,  2.29243583, 2.29244111, 2.29254866,2.29255221, 2.29261536, 2.2925526,  2.29261884, 2.29281979, 2.29296528,2.29311769, 2.29333269, 2.29348752, 2.2935272,  2.293833,   2.29399126,2.29416266, 2.29422963, 2.29431898, 2.29455189, 2.29464745, 2.29465755,2.29471644, 2.2949823,  2.2949008,  2.29476879, 2.29471482, 2.29477751,2.29490558, 2.29476855, 2.29462812, 2.29464441, 2.29468458, 2.29457316,2.29461492, 2.29444788, 2.29430771, 2.29427498, 2.29408877, 2.29407273,2.29408294, 2.29404886, 2.29381591, 2.29374698, 2.29368253, 2.29371465,2.29369559, 2.29363825, 2.29350841, 2.29344231, 2.29347521, 2.29349108,2.29356213, 2.29363117, 2.29359718, 2.29373961, 2.29373123, 2.29379933,2.293877,   2.29393649, 2.2939604,  2.29396978, 2.29413103, 2.29417453,2.29425142, 2.29423024, 2.29439815, 2.29430962, 2.29435591, 2.29429795, 2.29422108, 2.29414406, 2.29413436, 2.2942116,  2.29430071, 2.29424815])